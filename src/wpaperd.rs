use std::fs::File;
use std::io::Write;
use toml::{Value, to_string_pretty};
use crate::splitter::ResultPaper;

pub struct WpaperdConfig {
    pub config_path: String,
    pub papers: Vec<ResultPaper>,
}

impl WpaperdConfig {
    pub fn new(path: String, wallpapers: Vec<ResultPaper>) -> Self {
        Self {
            config_path: path,
            papers: wallpapers
        }
    }
    pub fn build(&self) -> Result<(), String> {
        // Create a new config file
        let mut file = File::create(&self.config_path).map_err(|_| "error while creating config file")?;

        // Open the file
        let read_file = std::fs::read_to_string(&self.config_path).map_err(|_| "error while opening config file")?;

        // Parse the string into a TOML value
        let mut value = read_file.parse::<Value>().unwrap();

        // Add new output sections
        for monitor in &self.papers {
            // insert new section
            value.as_table_mut().unwrap().insert(
                monitor.monitor_name.to_string(), 
                Value::Table(Default::default())
            );
            // add path value
            let path = value.get_mut(
                monitor.monitor_name.to_string()
            ).unwrap();
            path.as_table_mut().unwrap().insert(
                "path".to_string(),
                Value::String(monitor.image_full_path.to_string())
            );
        }

        // write the file
        file.write(b"# AUTOGENERATED CONFIG BY RWPSPREAD\n\n").unwrap();
        file.write_all(to_string_pretty(&value).unwrap().as_bytes()).unwrap();

        // return
        Ok(())
    }
}
